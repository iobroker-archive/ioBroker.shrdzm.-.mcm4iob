{
  "version": 3,
  "sources": ["../../src/lib/shrdzmHistory.ts"],
  "sourcesContent": ["import type { DeviceId, ObisCode, Timestamp } from './types';\n\nimport { MeanValue } from './meanValue';\n\ntype DataSet = {\n    /** identification */\n    id: number;\n    /** starting value (meter reading) of period for energy values */\n    startValue: number;\n    /** current value (meter reading) for energy values */\n    currValue: number;\n    /** instance of meanValue for power values */\n    meanValue: MeanValue | null;\n    /** value to be set as state */\n    value: number;\n};\n\ntype HistoryEntry = {\n    switched: boolean;\n    curr: DataSet;\n    last: DataSet;\n};\n\ntype HistoryBlock = {\n    [key: DeviceId]: {\n        [key: ObisCode]: {\n            minute: HistoryEntry;\n            quarter: HistoryEntry;\n            hour: HistoryEntry;\n            day: HistoryEntry;\n        };\n    };\n};\n\nconst historyCache: HistoryBlock = {};\n\nfunction initCache(deviceId: DeviceId, obisCode: ObisCode): void {\n    if (!historyCache[deviceId]) {\n        historyCache[deviceId] = {};\n    }\n    if (!historyCache[deviceId][obisCode]) {\n        historyCache[deviceId][obisCode] = {\n            minute: {\n                switched: false,\n                curr: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: new MeanValue(),\n                    value: 0,\n                },\n                last: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: null,\n                    value: 0,\n                },\n            },\n            quarter: {\n                switched: false,\n                curr: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: new MeanValue(),\n                    value: 0,\n                },\n                last: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: null,\n                    value: 0,\n                },\n            },\n            hour: {\n                switched: false,\n                curr: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: new MeanValue(),\n                    value: 0,\n                },\n                last: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: null,\n                    value: 0,\n                },\n            },\n            day: {\n                switched: false,\n                curr: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: new MeanValue(),\n                    value: 0,\n                },\n                last: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: null,\n                    value: 0,\n                },\n            },\n        };\n    }\n}\n\nfunction getId(date: Date): number {\n    return (\n        // eslint-disable-next-line\n        ((((date.getFullYear() * 100 + date.getMonth() + 1) * 100 + date.getUTCDate()) * 100 + date.getUTCHours()) * 100 + date.getUTCMinutes()) * 100 \n    );\n}\n\nfunction getId4Quarter(date: Date): number {\n    return (\n        // eslint-disable-next-line\n        ((((date.getFullYear() * 100 + date.getMonth() + 1) * 100 + date.getUTCDate()) * 100 + date.getUTCHours()) * 100 + Math.trunc(date.getUTCMinutes()/15)*15) * 100 \n    );\n}\n\nfunction switchEntry(historyEntry: HistoryEntry, id: number, value: number): void {\n    historyEntry.last.id = historyEntry.curr.id;\n    historyEntry.last.value = historyEntry.curr.value;\n    historyEntry.last.startValue = historyEntry.curr.startValue;\n\n    historyEntry.curr.id = id;\n    historyEntry.curr.meanValue?.reset();\n    historyEntry.curr.startValue = historyEntry.curr.currValue ? historyEntry.curr.currValue : value;\n\n    historyEntry.switched = true;\n}\n\nfunction updateEnergy(historyEntry: HistoryEntry, id: number, value: number): void {\n    historyEntry.switched = false;\n    if (historyEntry.curr.id !== id) {\n        switchEntry(historyEntry, id, value);\n    }\n    historyEntry.curr.currValue = value;\n    historyEntry.curr.value = value - historyEntry.curr.startValue;\n}\n\nfunction updateEnergyMinute(date: Date, deviceId: DeviceId, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[deviceId][obisCode].minute;\n    const id = getId(date);\n    updateEnergy(historyEntry, id, value);\n}\n\nfunction updateEnergyQuarter(date: Date, deviceId: DeviceId, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[deviceId][obisCode].quarter;\n    const id = getId4Quarter(date);\n    updateEnergy(historyEntry, id, value);\n}\n\nfunction updateEnergyHour(date: Date, deviceId: DeviceId, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[deviceId][obisCode].hour;\n    const id = Math.trunc(getId(date) / 100 / 100) * 100 * 100;\n    updateEnergy(historyEntry, id, value);\n}\n\nfunction updateEnergyDay(date: Date, deviceId: DeviceId, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[deviceId][obisCode].day;\n    const id = Math.trunc(getId(date) / 100 / 100 / 100) * 100 * 100 * 100;\n    updateEnergy(historyEntry, id, value);\n}\n\nfunction updatePower(historyEntry: HistoryEntry, id: number, value: number): void {\n    historyEntry.switched = false;\n    if (historyEntry.curr.id !== id) {\n        switchEntry(historyEntry, id, 0);\n    }\n    historyEntry.curr.value = historyEntry.curr.meanValue?.add(value) || 0;\n}\n\nfunction updatePowerMinute(date: Date, deviceId: DeviceId, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[deviceId][obisCode].minute;\n    const id = getId(date);\n    updatePower(historyEntry, id, value);\n}\n\nfunction updatePowerQuarter(date: Date, deviceId: DeviceId, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[deviceId][obisCode].quarter;\n    const id = getId4Quarter(date);\n    updatePower(historyEntry, id, value);\n}\n\nfunction updatePowerHour(date: Date, deviceId: DeviceId, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[deviceId][obisCode].hour;\n    const id = Math.trunc(getId(date) / 100 / 100) * 100 * 100;\n    updatePower(historyEntry, id, value);\n}\n\nfunction updatePowerDay(date: Date, deviceId: DeviceId, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[deviceId][obisCode].day;\n    const id = Math.trunc(getId(date) / 100 / 100 / 100) * 100 * 100 * 100;\n    updatePower(historyEntry, id, value);\n}\n\ntype UpdateEntry = {\n    id: number;\n    value: number;\n    startValue: number;\n};\n\ntype UpdateData = {\n    minute: {\n        switched: boolean;\n        curr: UpdateEntry;\n        last: UpdateEntry;\n    };\n    quarter: {\n        switched: boolean;\n        curr: UpdateEntry;\n        last: UpdateEntry;\n    };\n    hour: {\n        switched: boolean;\n        curr: UpdateEntry;\n        last: UpdateEntry;\n    };\n\n    day: {\n        switched: boolean;\n        curr: UpdateEntry;\n        last: UpdateEntry;\n    };\n};\n\n/**\n * doEnergy\n *\n * process an energy history entry specified by obisCode\n *\n * @param ts timestamp to use for id calculation\n * @param deviceId deviceId as transmitted by shrdzm Api\n * @param obisCode obisCode to use\n * @param value new value to store\n */\nexport function doEnergy(ts: Timestamp, deviceId: DeviceId, obisCode: ObisCode, value: number): UpdateData {\n    initCache(deviceId, obisCode);\n\n    const date = new Date(ts);\n    updateEnergyMinute(date, deviceId, obisCode, value);\n    updateEnergyQuarter(date, deviceId, obisCode, value);\n    updateEnergyHour(date, deviceId, obisCode, value);\n    updateEnergyDay(date, deviceId, obisCode, value);\n\n    return {\n        minute: {\n            switched: historyCache[deviceId][obisCode].minute.switched,\n            curr: {\n                id: historyCache[deviceId][obisCode].minute.curr.id,\n                startValue: historyCache[deviceId][obisCode].minute.curr.startValue,\n                value: historyCache[deviceId][obisCode].minute.curr.value,\n            },\n            last: {\n                id: historyCache[deviceId][obisCode].minute.last.id,\n                startValue: historyCache[deviceId][obisCode].minute.last.startValue,\n                value: historyCache[deviceId][obisCode].minute.last.value,\n            },\n        },\n        quarter: {\n            switched: historyCache[deviceId][obisCode].quarter.switched,\n            curr: {\n                id: historyCache[deviceId][obisCode].quarter.curr.id,\n                startValue: historyCache[deviceId][obisCode].quarter.curr.startValue,\n                value: historyCache[deviceId][obisCode].quarter.curr.value,\n            },\n            last: {\n                id: historyCache[deviceId][obisCode].quarter.last.id,\n                startValue: historyCache[deviceId][obisCode].quarter.last.startValue,\n                value: historyCache[deviceId][obisCode].quarter.last.value,\n            },\n        },\n        hour: {\n            switched: historyCache[deviceId][obisCode].hour.switched,\n            curr: {\n                id: historyCache[deviceId][obisCode].hour.curr.id,\n                startValue: historyCache[deviceId][obisCode].hour.curr.startValue,\n                value: historyCache[deviceId][obisCode].hour.curr.value,\n            },\n            last: {\n                id: historyCache[deviceId][obisCode].hour.last.id,\n                startValue: historyCache[deviceId][obisCode].hour.last.startValue,\n                value: historyCache[deviceId][obisCode].hour.last.value,\n            },\n        },\n        day: {\n            switched: historyCache[deviceId][obisCode].day.switched,\n            curr: {\n                id: historyCache[deviceId][obisCode].day.curr.id,\n                startValue: historyCache[deviceId][obisCode].day.curr.startValue,\n                value: historyCache[deviceId][obisCode].day.curr.value,\n            },\n            last: {\n                id: historyCache[deviceId][obisCode].day.last.id,\n                startValue: historyCache[deviceId][obisCode].day.last.startValue,\n                value: historyCache[deviceId][obisCode].day.last.value,\n            },\n        },\n    };\n}\n\n/**\n * doPower\n *\n * process an power history entry specified by obisCode\n *\n * @param ts timestamp to use for id calculation\n * @param deviceId deviceId as transmitted by shrdzm Api\n * @param obisCode obisCode to use\n * @param value new value to store\n */\nexport function doPower(ts: Timestamp, deviceId: DeviceId, obisCode: ObisCode, value: number): UpdateData {\n    initCache(deviceId, obisCode);\n\n    const date = new Date(ts);\n    updatePowerMinute(date, deviceId, obisCode, value);\n    updatePowerQuarter(date, deviceId, obisCode, value);\n    updatePowerHour(date, deviceId, obisCode, value);\n    updatePowerDay(date, deviceId, obisCode, value);\n\n    return {\n        minute: {\n            switched: historyCache[deviceId][obisCode].minute.switched,\n            curr: {\n                id: historyCache[deviceId][obisCode].minute.curr.id,\n                startValue: historyCache[deviceId][obisCode].minute.curr.startValue,\n                value: historyCache[deviceId][obisCode].minute.curr.value,\n            },\n            last: {\n                id: historyCache[deviceId][obisCode].minute.last.id,\n                startValue: historyCache[deviceId][obisCode].minute.last.startValue,\n                value: historyCache[deviceId][obisCode].minute.last.value,\n            },\n        },\n        quarter: {\n            switched: historyCache[deviceId][obisCode].quarter.switched,\n            curr: {\n                id: historyCache[deviceId][obisCode].quarter.curr.id,\n                startValue: historyCache[deviceId][obisCode].quarter.curr.startValue,\n                value: historyCache[deviceId][obisCode].quarter.curr.value,\n            },\n            last: {\n                id: historyCache[deviceId][obisCode].quarter.last.id,\n                startValue: historyCache[deviceId][obisCode].quarter.last.startValue,\n                value: historyCache[deviceId][obisCode].quarter.last.value,\n            },\n        },\n        hour: {\n            switched: historyCache[deviceId][obisCode].hour.switched,\n            curr: {\n                id: historyCache[deviceId][obisCode].hour.curr.id,\n                startValue: historyCache[deviceId][obisCode].hour.curr.startValue,\n                value: historyCache[deviceId][obisCode].hour.curr.value,\n            },\n            last: {\n                id: historyCache[deviceId][obisCode].hour.last.id,\n                startValue: historyCache[deviceId][obisCode].hour.last.startValue,\n                value: historyCache[deviceId][obisCode].hour.last.value,\n            },\n        },\n        day: {\n            switched: historyCache[deviceId][obisCode].day.switched,\n            curr: {\n                id: historyCache[deviceId][obisCode].day.curr.id,\n                startValue: historyCache[deviceId][obisCode].day.curr.startValue,\n                value: historyCache[deviceId][obisCode].day.curr.value,\n            },\n            last: {\n                id: historyCache[deviceId][obisCode].day.last.id,\n                startValue: historyCache[deviceId][obisCode].day.last.startValue,\n                value: historyCache[deviceId][obisCode].day.last.value,\n            },\n        },\n    };\n}\n\n/**\n * setCache\n *\n * This function is used to initalize the cache to aspecific value during startup\n *\n * @param deviceId deviceId as transmitted by shrdzm Api\n * @param obisCode obisCode to use\n * @param rangeId specified to select minute / quarter / hour / day range\n * @param stateId specifier to select curr or last state\n * @param value value to store into chacke\n */\nexport function setCache(deviceId: DeviceId, obisCode: ObisCode, rangeId: string, stateId: string, value: number): boolean {\n    initCache(deviceId, obisCode);\n\n    if (!['minute', 'quarter', 'hour', 'day'].includes(rangeId)) {\n        return false;\n    }\n\n    if (stateId === 'currId') {\n        // @ts-expect-error range already checked\n        historyCache[deviceId][obisCode][rangeId].curr.id = value;\n    } else if (stateId === 'lastId') {\n        // @ts-expect-error range already checked\n        historyCache[deviceId][obisCode][rangeId].last.id = value;\n    } else if (stateId === 'currStart') {\n        // @ts-expect-error range already checked\n        historyCache[deviceId][obisCode][rangeId].curr.startValue = value;\n    } else if (stateId === 'lastStart') {\n        // @ts-expect-error range already checked\n        historyCache[deviceId][obisCode][rangeId].last.startValue = value;\n    } else if (stateId === 'curr') {\n        // @ts-expect-error range already checked\n        historyCache[deviceId][obisCode][rangeId].curr.value = value;\n    } else if (stateId === 'last') {\n        // @ts-expect-error range already checked\n        historyCache[deviceId][obisCode][rangeId].last.value = value;\n    } else {\n        return false;\n    }\n    return true;\n}\n"],
  "mappings": "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",
  "names": []
}
