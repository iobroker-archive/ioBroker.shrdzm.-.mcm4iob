{
  "version": 3,
  "sources": ["../../src/lib/shrdzmHistory.ts"],
  "sourcesContent": ["import type { ObisCode, Timestamp } from './types';\n\nimport { MeanValue } from './meanValue';\n\ntype DataSet = {\n    /** identification */\n    id: number;\n    /** starting value (meter reading) of period for energy values */\n    startValue: number;\n    /** current value (meter reading) for energy values */\n    currValue: number;\n    /** instance of meanValue for power values */\n    meanValue: MeanValue | null;\n    /** value to be set as state */\n    value: number;\n};\n\ntype HistoryEntry = {\n    curr: DataSet;\n    last: DataSet;\n};\n\ntype HistoryBlock = {\n    [key: ObisCode]: {\n        minute: HistoryEntry;\n        quarter: HistoryEntry;\n        hour: HistoryEntry;\n        day: HistoryEntry;\n    };\n};\n\nconst historyCache: HistoryBlock = {};\n\nfunction initCache(obisCode: ObisCode): void {\n    if (!historyCache[obisCode]) {\n        historyCache[obisCode] = {\n            minute: {\n                curr: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: new MeanValue(),\n                    value: 0,\n                },\n                last: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: null,\n                    value: 0,\n                },\n            },\n            quarter: {\n                curr: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: new MeanValue(),\n                    value: 0,\n                },\n                last: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: null,\n                    value: 0,\n                },\n            },\n            hour: {\n                curr: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: new MeanValue(),\n                    value: 0,\n                },\n                last: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: null,\n                    value: 0,\n                },\n            },\n            day: {\n                curr: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: new MeanValue(),\n                    value: 0,\n                },\n                last: {\n                    id: -1,\n                    startValue: 0,\n                    currValue: 0,\n                    meanValue: null,\n                    value: 0,\n                },\n            },\n        };\n    }\n}\n\nfunction switchEntry(historyEntry: HistoryEntry, id: number, value: number): void {\n    historyEntry.last.id = historyEntry.curr.id;\n    historyEntry.last.value = historyEntry.curr.value;\n    historyEntry.curr.id = id;\n\n    historyEntry.curr.meanValue?.reset();\n    historyEntry.curr.startValue = historyEntry.curr.currValue ? historyEntry.curr.currValue : value;\n}\n\nfunction updateEnergy(historyEntry: HistoryEntry, id: number, value: number): void {\n    if (historyEntry.curr.id !== id) {\n        switchEntry(historyEntry, id, value);\n    }\n    historyEntry.curr.currValue = value;\n    historyEntry.curr.value = value - historyEntry.curr.startValue;\n}\n\nfunction getId(date: Date): number {\n    return (\n        // eslint-disable-next-line\n        ((((date.getFullYear() * 100 + date.getMonth() + 1) * 100 + date.getDay()) * 100 + date.getHours()) * 100 + date.getMinutes()) * 100 \n    );\n}\n\nfunction updateEnergyMinute(date: Date, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[obisCode].minute;\n    const id = getId(date);\n    updateEnergy(historyEntry, id, value);\n}\n\nfunction updateEnergyQuarter(date: Date, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[obisCode].quarter;\n    const id = Math.trunc(getId(date) / 15 / 100) * 15 * 100;\n    updateEnergy(historyEntry, id, value);\n}\n\nfunction updateEnergyHour(date: Date, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[obisCode].hour;\n    const id = Math.trunc(getId(date) / 100 / 100) * 100 * 100;\n    updateEnergy(historyEntry, id, value);\n}\n\nfunction updateEnergyDay(date: Date, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[obisCode].day;\n    const id = Math.trunc(getId(date) / 100 / 100 / 100) * 100 * 100 * 100;\n    updateEnergy(historyEntry, id, value);\n}\n\nfunction updatePower(historyEntry: HistoryEntry, id: number, value: number): void {\n    if (historyEntry.curr.id !== id) {\n        switchEntry(historyEntry, id, 0);\n    }\n    historyEntry.curr.value = historyEntry.curr.meanValue?.add(value) || 0;\n}\n\nfunction updatePowerMinute(date: Date, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[obisCode].minute;\n    const id = getId(date);\n    updatePower(historyEntry, id, value);\n}\n\nfunction updatePowerQuarter(date: Date, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[obisCode].quarter;\n    const id = Math.trunc(getId(date) / 15 / 100) * 15 * 100;\n    updatePower(historyEntry, id, value);\n}\n\nfunction updatePowerHour(date: Date, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[obisCode].hour;\n    const id = Math.trunc(getId(date) / 100 / 100) * 100 * 100;\n    updatePower(historyEntry, id, value);\n}\n\nfunction updatePowerDay(date: Date, obisCode: ObisCode, value: number): void {\n    const historyEntry = historyCache[obisCode].day;\n    const id = Math.trunc(getId(date) / 100 / 100 / 100) * 100 * 100 * 100;\n    updatePower(historyEntry, id, value);\n}\n\ntype UpdateEntry = {\n    id: number;\n    value: number;\n    startValue: number;\n};\n\ntype UpdateData = {\n    minute: {\n        switched: boolean;\n        curr: UpdateEntry;\n        last: UpdateEntry;\n    };\n    quarter: {\n        switched: boolean;\n        curr: UpdateEntry;\n        last: UpdateEntry;\n    };\n    hour: {\n        switched: boolean;\n        curr: UpdateEntry;\n        last: UpdateEntry;\n    };\n\n    day: {\n        switched: boolean;\n        curr: UpdateEntry;\n        last: UpdateEntry;\n    };\n};\n\n/**\n * doEnergy\n *\n * process an energy history entry specified by obisCode\n *\n * @param ts timestamp to use for id calculation\n * @param obisCode obisCode to use\n * @param value new value to store\n */\nexport function doEnergy(ts: Timestamp, obisCode: ObisCode, value: number): UpdateData {\n    initCache(obisCode);\n\n    const date = new Date(ts);\n    updateEnergyMinute(date, obisCode, value);\n    updateEnergyQuarter(date, obisCode, value);\n    updateEnergyHour(date, obisCode, value);\n    updateEnergyDay(date, obisCode, value);\n\n    return {\n        minute: {\n            switched: true,\n            curr: {\n                id: historyCache[obisCode].minute.curr.id,\n                startValue: historyCache[obisCode].minute.curr.startValue,\n                value: historyCache[obisCode].minute.curr.value,\n            },\n            last: {\n                id: historyCache[obisCode].minute.last.id,\n                startValue: historyCache[obisCode].minute.last.startValue,\n                value: historyCache[obisCode].minute.last.value,\n            },\n        },\n        quarter: {\n            switched: true,\n            curr: {\n                id: historyCache[obisCode].quarter.curr.id,\n                startValue: historyCache[obisCode].quarter.curr.startValue,\n                value: historyCache[obisCode].quarter.curr.value,\n            },\n            last: {\n                id: historyCache[obisCode].quarter.last.id,\n                startValue: historyCache[obisCode].quarter.last.startValue,\n                value: historyCache[obisCode].quarter.last.value,\n            },\n        },\n        hour: {\n            switched: true,\n            curr: {\n                id: historyCache[obisCode].hour.curr.id,\n                startValue: historyCache[obisCode].hour.curr.startValue,\n                value: historyCache[obisCode].hour.curr.value,\n            },\n            last: {\n                id: historyCache[obisCode].hour.last.id,\n                startValue: historyCache[obisCode].hour.last.startValue,\n                value: historyCache[obisCode].hour.last.value,\n            },\n        },\n        day: {\n            switched: true,\n            curr: {\n                id: historyCache[obisCode].day.curr.id,\n                startValue: historyCache[obisCode].day.curr.startValue,\n                value: historyCache[obisCode].day.curr.value,\n            },\n            last: {\n                id: historyCache[obisCode].day.last.id,\n                startValue: historyCache[obisCode].day.last.startValue,\n                value: historyCache[obisCode].day.last.value,\n            },\n        },\n    };\n}\n\n/**\n * doPower\n *\n * process an power history entry specified by obisCode\n *\n * @param ts timestamp to use for id calculation\n * @param obisCode obisCode to use\n * @param value new value to store\n */\nexport function doPower(ts: Timestamp, obisCode: ObisCode, value: number): UpdateData {\n    initCache(obisCode);\n\n    const date = new Date(ts);\n    updatePowerMinute(date, obisCode, value);\n    updatePowerQuarter(date, obisCode, value);\n    updatePowerHour(date, obisCode, value);\n    updatePowerDay(date, obisCode, value);\n\n    return {\n        minute: {\n            switched: true,\n            curr: {\n                id: historyCache[obisCode].minute.curr.id,\n                startValue: historyCache[obisCode].minute.curr.startValue,\n                value: historyCache[obisCode].minute.curr.value,\n            },\n            last: {\n                id: historyCache[obisCode].minute.last.id,\n                startValue: historyCache[obisCode].minute.last.startValue,\n                value: historyCache[obisCode].minute.last.value,\n            },\n        },\n        quarter: {\n            switched: true,\n            curr: {\n                id: historyCache[obisCode].quarter.curr.id,\n                startValue: historyCache[obisCode].quarter.curr.startValue,\n                value: historyCache[obisCode].quarter.curr.value,\n            },\n            last: {\n                id: historyCache[obisCode].quarter.last.id,\n                startValue: historyCache[obisCode].quarter.last.startValue,\n                value: historyCache[obisCode].quarter.last.value,\n            },\n        },\n        hour: {\n            switched: true,\n            curr: {\n                id: historyCache[obisCode].hour.curr.id,\n                startValue: historyCache[obisCode].hour.curr.startValue,\n                value: historyCache[obisCode].hour.curr.value,\n            },\n            last: {\n                id: historyCache[obisCode].hour.last.id,\n                startValue: historyCache[obisCode].hour.last.startValue,\n                value: historyCache[obisCode].hour.last.value,\n            },\n        },\n        day: {\n            switched: true,\n            curr: {\n                id: historyCache[obisCode].day.curr.id,\n                startValue: historyCache[obisCode].day.curr.startValue,\n                value: historyCache[obisCode].day.curr.value,\n            },\n            last: {\n                id: historyCache[obisCode].day.last.id,\n                startValue: historyCache[obisCode].day.last.startValue,\n                value: historyCache[obisCode].day.last.value,\n            },\n        },\n    };\n}\n"],
  "mappings": "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",
  "names": []
}
