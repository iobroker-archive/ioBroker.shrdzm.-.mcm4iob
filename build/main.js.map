{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n//\n// UDP packet example:\n\n// 2025-03-09 23:19:30.001  - debug: shrdzm.0 (16592) onUdp4SrvMessage({\"id\":\"84CCA8A411EB\",\"data\":{\n//     \"timestamp\":\"2025-03-09T23:19:28\",\n//     \"1.8.0\":\"11241092\",\n//     \"2.8.0\":\"333163\",\n//     \"3.8.0\":\"106565\",\n//     \"4.8.0\":\"7282188\",\n//     \"1.7.0\":\"361\",\n//     \"2.7.0\":\"0\",\n//     \"3.7.0\":\"0\",\n//     \"4.7.0\":\"275\",\n//     \"16.7.0\":\"361\",\n//     \"uptime\":\"0008:06:36:16\"\n//     }}, 10.17.2.26:21221)\n\nimport * as utils from '@iobroker/adapter-core';\nimport dgram, { type RemoteInfo } from 'node:dgram';\n\nimport type { DeviceId, ObisCode, Timestamp, ShrdzmMsg } from './lib/types';\nimport * as history from './lib/shrdzmHistory';\n\nconst OBIS: {\n    [key: ObisCode]: {\n        name: string;\n        role: string;\n        unit: string;\n        histEnergy: boolean;\n        histPower: boolean;\n    };\n} = {\n    '1.6.0': {\n        // Viertelstundenmaximum (Bezug) in kW\n        name: 'lblPeakActivePowerConsumed',\n        role: 'value.power.consumed',\n        unit: 'W',\n        histEnergy: false,\n        histPower: false,\n    },\n    '2.6.0': {\n        // Viertelstundenmaximum (Einspeisung) in kW\n        name: 'lblPeakActivePowerProduced',\n        role: 'value.power.produced',\n        unit: 'Wh',\n        histEnergy: false,\n        histPower: false,\n    },\n    '1.7.0': {\n        // Momentanleistung (Bezug) in kW\n        name: 'lblActivePowerConsumed',\n        role: 'value.power.consumed',\n        unit: 'W',\n        histEnergy: false,\n        histPower: true,\n    },\n    '2.7.0': {\n        // Momentanleistung (Einspeisung) in kW\n        name: 'lblActivePowerProduced',\n        role: 'value.power.produced',\n        unit: 'W',\n        histEnergy: false,\n        histPower: true,\n    },\n    '3.7.0': {\n        // Momentanblindleistung (Bezug) in kVar\n        name: 'lblReactivePowerConsumed',\n        role: 'value.power.reactive',\n        unit: 'Var',\n        histEnergy: false,\n        histPower: false,\n    },\n    '4.7.0': {\n        // Momentanblindleistung (Einspeisung) in kVar\n        name: 'lblReactivePowerProduced',\n        role: 'value.power.reactive',\n        unit: 'Var',\n        histEnergy: false,\n        histPower: false,\n    },\n    '1.8.0': {\n        // Summe Energie / Z\u00E4hlerstand (Bezug) in kWh\n        name: 'lblActiveEnergyConsumed',\n        role: 'value.energy.consumed',\n        unit: 'Wh',\n        histEnergy: true,\n        histPower: false,\n    },\n    '1.8.1': {\n        // Z\u00E4hlerstand (Bezug) T1 (NT) in kWh\n        name: 'lblActiveEnergyT1Consumed',\n        role: 'value.energy.consumed',\n        unit: 'Wh',\n        histEnergy: false,\n        histPower: false,\n    },\n    '1.8.2': {\n        // Z\u00E4hlerstand (Bezug) T2 (HT) in kWh\n        name: 'lblActiveEnergyT2Consumed',\n        role: 'value.energy.consumed',\n        unit: 'Wh',\n        histEnergy: false,\n        histPower: false,\n    },\n    '2.8.0': {\n        // Summe Energie Z\u00E4hlerstand (Einspeisung) in kWh\n        name: 'lblACtiveEnergyProduced',\n        role: 'value.energy.produced',\n        unit: 'Wh',\n        histEnergy: true,\n        histPower: false,\n    },\n    '2.8.1': {\n        // Z\u00E4hlerstand (Einspeisung) T1 (NT) in kWh\n        name: 'lblActiveEnergyT1Produced',\n        role: 'value.energy.produced',\n        unit: 'Wh',\n        histEnergy: false,\n        histPower: false,\n    },\n    '2.8.2': {\n        // Z\u00E4hlerstand (Einspeisung) T2 (HT) in kWh\n        name: 'lblActiveEnergyT2Produced',\n        role: 'value.energy.produced',\n        unit: 'Wh',\n        histEnergy: false,\n        histPower: false,\n    },\n    '3.8.0': {\n        // Summe Blindenergie (Bezug) in kVarh\n        name: 'lblReactiveEnergyConsumed',\n        role: 'value.energy.reactive',\n        unit: 'Var',\n        histEnergy: false,\n        histPower: false,\n    },\n    '4.8.0': {\n        // Summe Blindenergie (Einspeisung) in kVarh\n        name: 'lblReactiveEnergyProduced',\n        role: 'value.energy.reactive',\n        unit: 'Var',\n        histEnergy: false,\n        histPower: false,\n    },\n    '16.7.0': {\n        // Momentleistung (saldiert) in kW\n        name: 'lblPower',\n        role: 'value.power',\n        unit: 'W',\n        histEnergy: false,\n        histPower: true,\n    },\n};\n\nclass Shrdzm extends utils.Adapter {\n    private udp4Srv: dgram.Socket | null = null;\n    private udp4SrvRetry = 10;\n\n    private intervalOnlineChecker: ioBroker.Interval | undefined;\n    private intervalUpdateRateChecker: ioBroker.Interval | undefined;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'shrdzm',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * onReady\n     *\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.log.silly(`onReady()`);\n\n        await this.setState('info.connection', false, true);\n\n        await utils.I18n.init(`${__dirname}/..`, this);\n\n        if (!this.validateConfig()) {\n            this.disable;\n            return;\n        }\n\n        await this.importStatus();\n\n        if (!this.initUdp4Srv()) {\n            this.disable;\n            return;\n        }\n\n        this.intervalUpdateRateChecker = this.setInterval(async () => {\n            await this.updateRateChecker();\n        }, 60_000);\n\n        this.intervalOnlineChecker = this.setInterval(async () => {\n            await this.updateOnlineChecker();\n        }, 10_000);\n    }\n\n    /**\n     * onUnload\n     *\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback standard ioBroker callback\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.udp4Srv && this.udp4Srv.close();\n\n            this.intervalUpdateRateChecker && this.clearInterval(this.intervalUpdateRateChecker);\n            this.intervalOnlineChecker && this.clearInterval(this.intervalOnlineChecker);\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n\n    /**\n     * processUdp4Message\n     *\n     * handles a message received via udp4Srv\n     *\n     * @param msg data pacakte received (should be json)\n     * @param rinfo remote infor record\n     */\n    private async processUdp4Message(msg: Buffer, rinfo: RemoteInfo): Promise<void> {\n        this.log.silly(`processUdp4SrvMessage(${msg.toString()}, ${JSON.stringify(rinfo)})`);\n\n        let msgJson: ShrdzmMsg;\n\n        try {\n            msgJson = await JSON.parse(msg.toString());\n        } catch (e: any) {\n            this.log.warn(`invalid packet received - ${e.message}`);\n            this.log.warn(`${msg.toString()}`);\n            return;\n        }\n\n        if (!msgJson.id) {\n            this.log.warn('invalid packet received - id is missing');\n            this.log.warn(`${msg.toString()}`);\n            return;\n        }\n\n        const data = msgJson.data;\n        if (!data) {\n            this.log.warn('invalid packet received - data is missing');\n            this.log.warn(`${msg.toString()}`);\n            return;\n        }\n\n        if (!(await this.validateDevice(msgJson.id))) {\n            this.log.debug(`ignoring message from device ${msgJson.id} due to filter setting`);\n            return;\n        }\n\n        const deviceId: DeviceId = msgJson.id;\n        const ts: Timestamp = Date.parse(data.timestamp);\n\n        await this.setState(`${deviceId}.info.timestamp`, ts, true);\n        await this.setState(`${deviceId}.info.uptime`, data.uptime, true);\n        await this.updateRegister(deviceId);\n\n        const refreshEnergy = this.updateEnergy(deviceId);\n        const refreshPower = this.updatePower(deviceId);\n\n        for (const obisCode in msgJson.data) {\n            if (!obisCode.match(/\\d+\\.\\d+\\.\\d+/)) {\n                continue;\n            }\n\n            await this.validateObis(deviceId, obisCode);\n            await this.setObisLiveState(deviceId, obisCode, Number(msgJson.data[obisCode]), ts);\n\n            if (OBIS[obisCode]?.histEnergy) {\n                const result = history.doEnergy(ts, deviceId, obisCode, Number(msgJson.data[obisCode]));\n\n                if (\n                    refreshEnergy ||\n                    result.minute.switched ||\n                    result.quarter.switched ||\n                    result.hour.switched ||\n                    result.day.switched\n                ) {\n                    await this.setObisHistoryState(deviceId, obisCode, 'minute.curr', result.minute.curr.value, ts);\n                    await this.setObisHistoryState(deviceId, obisCode, 'quarter.curr', result.quarter.curr.value, ts);\n                    await this.setObisHistoryState(deviceId, obisCode, 'hour.curr', result.hour.curr.value, ts);\n                    await this.setObisHistoryState(deviceId, obisCode, 'day.curr', result.day.curr.value, ts);\n\n                    if (result.minute.switched) {\n                        await this.setObisHistoryState(deviceId, obisCode, 'minute.currId', result.minute.curr.id, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'minute.currStart', result.minute.curr.startValue, ts);\n\n                        await this.setObisHistoryState(deviceId, obisCode, 'minute.last', result.minute.last.value, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'minute.lastId', result.minute.last.id, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'minute.lastStart', result.minute.last.startValue, ts);\n                    }\n\n                    if (result.quarter.switched) {\n                        await this.setObisHistoryState(deviceId, obisCode, 'quarter.currId', result.quarter.curr.id, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'quarter.currStart', result.quarter.curr.startValue, ts);\n\n                        await this.setObisHistoryState(deviceId, obisCode, 'quarter.last', result.quarter.last.value, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'quarter.lastId', result.quarter.last.id, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'quarter.lastStart', result.quarter.last.startValue, ts);\n                    }\n\n                    if (result.hour.switched) {\n                        await this.setObisHistoryState(deviceId, obisCode, 'hour.currId', result.hour.curr.id, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'hour.currStart', result.hour.curr.startValue, ts);\n\n                        await this.setObisHistoryState(deviceId, obisCode, 'hour.last', result.hour.last.value, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'hour.lastId', result.hour.last.id, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'hour.lastStart', result.hour.last.startValue, ts);\n                    }\n\n                    if (result.day.switched) {\n                        await this.setObisHistoryState(deviceId, obisCode, 'day.currId', result.day.curr.id, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'day.currStart', result.day.curr.startValue, ts);\n\n                        await this.setObisHistoryState(deviceId, obisCode, 'day.last', result.day.last.value, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'day.lastId', result.day.last.id, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'day.lastStart', result.day.last.startValue, ts);\n                    }\n                }\n            }\n\n            if (OBIS[obisCode]?.histPower) {\n                const result = history.doPower(ts, deviceId, obisCode, Number(msgJson.data[obisCode]));\n\n                if (\n                    refreshPower ||\n                    result.minute.switched ||\n                    result.quarter.switched ||\n                    result.hour.switched ||\n                    result.day.switched\n                ) {\n                    await this.setObisHistoryState(deviceId, obisCode, 'minute.curr', result.minute.curr.value, ts);\n                    await this.setObisHistoryState(deviceId, obisCode, 'quarter.curr', result.quarter.curr.value, ts);\n                    await this.setObisHistoryState(deviceId, obisCode, 'hour.curr', result.hour.curr.value, ts);\n                    await this.setObisHistoryState(deviceId, obisCode, 'day.curr', result.day.curr.value, ts);\n\n                    if (result.minute.switched) {\n                        await this.setObisHistoryState(deviceId, obisCode, 'minute.currId', result.minute.curr.id, ts);\n\n                        await this.setObisHistoryState(deviceId, obisCode, 'minute.last', result.minute.last.value, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'minute.lastId', result.minute.last.id, ts);\n                    }\n\n                    if (result.quarter.switched) {\n                        await this.setObisHistoryState(deviceId, obisCode, 'quarter.currId', result.quarter.curr.id, ts);\n\n                        await this.setObisHistoryState(deviceId, obisCode, 'quarter.last', result.quarter.last.value, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'quarter.lastId', result.quarter.last.id, ts);\n                    }\n\n                    if (result.hour.switched) {\n                        await this.setObisHistoryState(deviceId, obisCode, 'hour.currId', result.hour.curr.id, ts);\n\n                        await this.setObisHistoryState(deviceId, obisCode, 'hour.last', result.hour.last.value, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'hour.lastId', result.hour.last.id, ts);\n                    }\n\n                    if (result.day.switched) {\n                        await this.setObisHistoryState(deviceId, obisCode, 'day.currId', result.day.curr.id, ts);\n\n                        await this.setObisHistoryState(deviceId, obisCode, 'day.last', result.day.last.value, ts);\n                        await this.setObisHistoryState(deviceId, obisCode, 'day.lastId', result.day.last.id, ts);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * validateConfig\n     *\n     * validates the user supplied configuration\n     */\n    private validateConfig(): boolean {\n        this.log.silly(`validateConfig()`);\n\n        let ok = true;\n        if (!this.config.port || this.config.port < 1024 || this.config.port > 65536) {\n            this.log.error(`invalid udp port ${this.config.port} specified, must be between 1025 and 65535`);\n            ok = false;\n        }\n\n        if (!this.config.energyRate) {\n            this.config.energyRate = 15;\n        }\n\n        if (!this.config.powerRate) {\n            this.config.powerRate = 5;\n        }\n        return ok;\n    }\n\n    /**\n     * initDevice\n     *\n     * initializes the devoce database and creates states if required\n     *\n     * @param deviceId shrzdm device id\n     */\n    private async initDevice(deviceId: DeviceId): Promise<void> {\n        this.log.silly(`initDevice( ${deviceId} )`);\n\n        await this.extendObject(\n            `${deviceId}`,\n            {\n                type: 'device',\n                common: {\n                    name: deviceId,\n                },\n                native: {},\n            },\n            { preserve: { common: ['name'] } },\n        );\n\n        // info channel\n        await this.extendObject(\n            `${deviceId}.info`,\n            {\n                type: 'channel',\n                common: {\n                    name: utils.I18n.getTranslatedObject(`lblInfo`),\n                },\n                native: {},\n            },\n            { preserve: { common: ['name'] } },\n        );\n\n        await this.extendObject(\n            `${deviceId}.info.online`,\n            {\n                type: 'state',\n                common: {\n                    name: utils.I18n.getTranslatedObject(`lblInfoOnline`),\n                    type: 'boolean',\n                    role: 'indicator.reachable',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            },\n            { preserve: { common: ['name'] } },\n        );\n\n        await this.extendObject(\n            `${deviceId}.info.timestamp`,\n            {\n                type: 'state',\n                common: {\n                    name: utils.I18n.getTranslatedObject(`lblInfoTimestamp`),\n                    type: 'number',\n                    role: 'date',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            },\n            { preserve: { common: ['name'] } },\n        );\n\n        await this.extendObject(\n            `${deviceId}.info.uptime`,\n            {\n                type: 'state',\n                common: {\n                    name: utils.I18n.getTranslatedObject(`lblInfoUptime`),\n                    type: 'string',\n                    role: 'value',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            },\n            { preserve: { common: ['name'] } },\n        );\n\n        await this.extendObject(\n            `${deviceId}.info.rate`,\n            {\n                type: 'state',\n                common: {\n                    name: utils.I18n.getTranslatedObject(`lblInfoRate`),\n                    type: 'number',\n                    role: 'value',\n                    unit: '1/min',\n                    read: true,\n                    write: false,\n                },\n                native: {},\n            },\n            { preserve: { common: ['name'] } },\n        );\n\n        // live channel\n        await this.extendObject(\n            `${deviceId}.live`,\n            {\n                type: 'channel',\n                common: {\n                    name: utils.I18n.getTranslatedObject(`lblLive`),\n                },\n                native: {},\n            },\n            { preserve: { common: ['name'] } },\n        );\n\n        // history channel\n        await this.extendObject(\n            `${deviceId}.history`,\n            {\n                type: 'channel',\n                common: {\n                    name: utils.I18n.getTranslatedObject(`lblHistory`),\n                },\n                native: {},\n            },\n            { preserve: { common: ['name'] } },\n        );\n\n        this.updateInit(deviceId);\n    }\n\n    /**\n     * initObisState\n     *\n     * initializes OBIS related states\n     *\n     * @param id shrzdm device id\n     * @param obis OBIS code\n     */\n    private async initObisState(id: DeviceId, obis: ObisCode): Promise<void> {\n        this.log.silly(`initObisState(${id}, ${obis})`);\n\n        const obisId = obis.replaceAll('.', '_');\n\n        if (OBIS[obis]) {\n            await this.extendObject(\n                `${id}.live.${obisId}`,\n                {\n                    type: 'state',\n                    common: {\n                        name: utils.I18n.getTranslatedObject(OBIS[obis].name),\n                        type: 'number',\n                        role: OBIS[obis].role,\n                        unit: OBIS[obis].unit,\n                    },\n                    native: {},\n                },\n                { preserve: { common: ['name'] } },\n            );\n\n            if (OBIS[obis].histEnergy || OBIS[obis].histPower) {\n                await this.extendObject(\n                    `${id}.history.${obisId}`,\n                    {\n                        type: 'folder',\n                        common: {\n                            name: utils.I18n.getTranslatedObject(OBIS[obis].name),\n                        },\n                        native: {},\n                    },\n                    { preserve: { common: ['name'] } },\n                );\n\n                for (const range of ['Minute', 'Quarter', 'Hour', 'Day']) {\n                    await this.extendObject(\n                        `${id}.history.${obisId}.${range.toLowerCase()}`,\n                        {\n                            type: 'folder',\n                            common: {\n                                name: utils.I18n.getTranslatedObject(`lbl${range}`),\n                            },\n                            native: {},\n                        },\n                        { preserve: { common: ['name'] } },\n                    );\n\n                    await this.extendObject(\n                        `${id}.history.${obisId}.${range.toLowerCase()}.currId`,\n                        {\n                            type: 'state',\n                            common: {\n                                name: utils.I18n.getTranslatedObject(`lblCurrId`),\n                                type: 'number',\n                                role: 'value',\n                            },\n                            native: {},\n                        },\n                        { preserve: { common: ['name'] } },\n                    );\n\n                    await this.extendObject(\n                        `${id}.history.${obisId}.${range.toLowerCase()}.lastId`,\n                        {\n                            type: 'state',\n                            common: {\n                                name: utils.I18n.getTranslatedObject(`lblLastId`),\n                                type: 'number',\n                                role: 'value',\n                            },\n                            native: {},\n                        },\n                        { preserve: { common: ['name'] } },\n                    );\n\n                    await this.extendObject(\n                        `${id}.history.${obisId}.${range.toLowerCase()}.curr`,\n                        {\n                            type: 'state',\n                            common: {\n                                name: utils.I18n.getTranslatedObject(`lblCurr`),\n                                type: 'number',\n                                role: OBIS[obis].role,\n                                unit: OBIS[obis].unit,\n                            },\n                            native: {},\n                        },\n                        { preserve: { common: ['name'] } },\n                    );\n\n                    await this.extendObject(\n                        `${id}.history.${obisId}.${range.toLowerCase()}.last`,\n                        {\n                            type: 'state',\n                            common: {\n                                name: utils.I18n.getTranslatedObject(`lblLast`),\n                                type: 'number',\n                                role: OBIS[obis].role,\n                                unit: OBIS[obis].unit,\n                            },\n                            native: {},\n                        },\n                        { preserve: { common: ['name'] } },\n                    );\n\n                    if (OBIS[obis].histEnergy) {\n                        await this.extendObject(\n                            `${id}.history.${obisId}.${range.toLowerCase()}.currStart`,\n                            {\n                                type: 'state',\n                                common: {\n                                    name: utils.I18n.getTranslatedObject(`lblCurrStart`),\n                                    type: 'number',\n                                    role: OBIS[obis].role,\n                                    unit: OBIS[obis].unit,\n                                },\n                                native: {},\n                            },\n                            { preserve: { common: ['name'] } },\n                        );\n\n                        await this.extendObject(\n                            `${id}.history.${obisId}.${range.toLowerCase()}.lastStart`,\n                            {\n                                type: 'state',\n                                common: {\n                                    name: utils.I18n.getTranslatedObject(`lblLastStart`),\n                                    type: 'number',\n                                    role: OBIS[obis].role,\n                                    unit: OBIS[obis].unit,\n                                },\n                                native: {},\n                            },\n                            { preserve: { common: ['name'] } },\n                        );\n                    }\n                }\n            }\n        } else {\n            await this.extendObject(\n                `${id}.live.${obisId}`,\n                {\n                    type: 'state',\n                    common: {\n                        name: `OBIS-${obisId}`,\n                        type: 'number',\n                        role: 'value',\n                        unit: '',\n                    },\n                    native: {},\n                },\n                { preserve: { common: ['name'] } },\n            );\n        }\n    }\n\n    /**\n     * validateObis\n     *\n     * validate obis code received\n     *\n     * @param id shrzdm device id\n     * @param obis OBIS code\n     */\n    private obisIds: {\n        [key: string]: boolean;\n    } = {};\n\n    private async validateObis(id: DeviceId, obisCode: ObisCode): Promise<void> {\n        this.log.silly(`validateObis(${id}, ${obisCode})`);\n\n        if (this.obisIds[`${id}-${obisCode}`]) {\n            return;\n        }\n\n        await this.initObisState(id, obisCode);\n        this.obisIds[`${id}-${obisCode}`] = true;\n    }\n\n    /**\n     * setObisLiveState\n     *\n     * sets state identified by obis code\n     *\n     * @param id shrzdm device id\n     * @param obis OBIS code\n     * @param val value to be set\n     * @param ts timestamp to use\n     */\n\n    private async setObisLiveState(id: DeviceId, obisCode: ObisCode, value: number, ts: number): Promise<void> {\n        this.log.silly(`setObisLiveState(${id}, ${obisCode}, ${value})`);\n\n        const obisId = obisCode.replaceAll('.', '_');\n        await this.setState(`${id}.live.${obisId}`, {\n            val: value,\n            ack: true,\n            ts: ts,\n        });\n    }\n\n    /**\n     * setObisHistoryState\n     *\n     * sets history state identified by obis code and rangeId\n     *\n     * @param id shrzdm device id\n     * @param obis OBIS code\n     * @param rangeId\n     * @param val value to be set\n     * @param ts timestamp to use\n     */\n\n    private async setObisHistoryState(id: DeviceId, obisCode: ObisCode, rangeId: string, value: number, ts: number): Promise<void> {\n        this.log.silly(`setObisHistoryState(${id}, ${obisCode}, ${value})`);\n\n        const obisId = obisCode.replaceAll('.', '_');\n        await this.setState(`${id}.history.${obisId}.${rangeId}`, {\n            val: value,\n            ack: true,\n            ts: ts,\n        });\n    }\n\n    /**\n     *\n     * validateDevice\n     *\n     * validates whether device should be processed\n     */\n    private deviceIds: {\n        [key: DeviceId]: boolean;\n    } = {};\n\n    private async validateDevice(id: DeviceId): Promise<boolean> {\n        this.log.silly(`validateDevice(${id})`);\n\n        if (this.deviceIds[id] !== undefined) {\n            return this.deviceIds[id];\n        }\n\n        if (!id.match(/^[A-Z0-9]{12}$/)) {\n            this.log.warn(`message with invalid device id ${id} received, id will be ignored`);\n            this.deviceIds[id] = false;\n        }\n\n        if (this.config.devices && !this.config.devices.includes(id)) {\n            this.log.warn(`message from device with id ${id} received, id will be ignored`);\n            this.deviceIds[id] = false;\n        }\n\n        this.log.info(`device ${id} is active`);\n        await this.initDevice(id);\n        this.deviceIds[id] = true;\n\n        return true;\n    }\n\n    private async importStatus(): Promise<void> {\n        this.log.silly(`importStatus()`);\n\n        const states = await this.getStatesAsync('*');\n        for (const id in states) {\n            if (id.includes('.info.online')) {\n                await this.setState(id, false, true);\n            }\n\n            if (id.includes('.info.rate')) {\n                await this.setState(id, null, true);\n            }\n\n            if (id.includes('.info.uptime')) {\n                await this.setState(id, null, true);\n            }\n\n            if (id.includes('.history.')) {\n                this.log.debug(`\"${id}\" = \"${states[id].val}`);\n\n                //shrdzm.0.84CCA8A411EB.history.2_7_0.day.curr\" = \"0\"\n\n                const deviceId = id.split('.')[2];\n                const obisId = id.split('.')[4];\n                const obisCode = obisId.replaceAll('_', '.');\n                const rangeId = id.split('.')[5];\n                const stateId = id.split('.')[6];\n                const value = Number(states[id].val);\n\n                if (!history.setCache(deviceId, obisCode, rangeId, stateId, value)) {\n                    this.log.warn(`cannot initialize cache from ${id}:${states[id].val}`);\n                }\n            }\n        }\n    }\n\n    /**\n     * initUdp4Srv\n     *\n     * initializes the udp4Srv instance\n     */\n    private initUdp4Srv(): boolean {\n        try {\n            this.udp4Srv = dgram.createSocket('udp4');\n            this.udp4Srv.on('error', this.onUdp4SrvError.bind(this));\n            this.udp4Srv.on('message', this.onUdp4SrvMessage.bind(this));\n            this.udp4Srv.on('listening', this.onUdp4SrvListening.bind(this));\n        } catch (e: any) {\n            console.log(`error initializing udp4Src - ${e.message}`);\n            return false;\n        }\n\n        try {\n            this.udp4Srv && this.udp4Srv.bind(this.config.port);\n        } catch (e: any) {\n            console.log(`error binding udp4Src to port ${this.config.port} - ${e.message}`);\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * onUdp4SrvError\n     *\n     * is called if any error occures at udp4Srv socket\n     *\n     * @param err standard error object\n     */\n    private async onUdp4SrvError(err: Error): Promise<void> {\n        this.log.silly(`onUdp4SrvError( err )`);\n\n        this.log.error(`error reported by udp4Srv:\\n${err.stack}`);\n        this.udp4Srv && this.udp4Srv.close();\n\n        await this.setState('info.connection', false, true);\n\n        if (this.udp4SrvRetry--) {\n            this.log.info(`trying to restablish udp connection in 5s`);\n            this.setTimeout(this.initUdp4Srv, 5 * 1000);\n        } else {\n            this.log.error(`maximum number of retries exceeded`);\n        }\n    }\n\n    /**\n     * onUdp4SrvMessage\n     *\n     * is called whenever a new message is received at udp4Srv socket\n     *\n     * @param msg shrdzm data block received\n     * @param rinfo remote information provided by dram service\n     */\n    private async onUdp4SrvMessage(msg: Buffer, rinfo: RemoteInfo): Promise<void> {\n        this.log.debug(`onUdp4SrvMessage(${msg.toString()}, ${rinfo.address}:${rinfo.port})`);\n\n        if (this.config.udpFwdEnable && this.config.udpFwdAddress !== '' && this.config.udpFwdPort) {\n            const address = this.config.udpFwdAddress;\n            const port = this.config.udpFwdPort;\n            this.log.debug(`forwarding to ${address}:${port}`);\n\n            try {\n                this.udp4Srv?.send(msg, port, address);\n            } catch (e: any) {\n                this.log.error(`erroro forwarding message to ${address}:${port} - ${e.message}`);\n            }\n        }\n        await this.processUdp4Message(msg, rinfo);\n    }\n\n    /**\n     * onUdpSrvListening\n     *\n     * is called as soon as server starts listening\n     */\n    private async onUdp4SrvListening(): Promise<void> {\n        this.log.silly(`onUdp4SrvListening()`);\n\n        if (this.udp4Srv) {\n            const address = this.udp4Srv.address();\n            this.log.info(`server listening at ${address.address}:${address.port}`);\n\n            this.udp4SrvRetry = 12 * 60; // app. 1h of retries\n\n            await this.setState('info.connection', true, true);\n        }\n    }\n\n    private updateCache: {\n        [key: DeviceId]: {\n            count: number;\n            online: boolean;\n            energyCnt: number;\n            powerCnt: number;\n        };\n    } = {};\n\n    private updateInit(deviceId: DeviceId): void {\n        this.log.silly(`updateInit(${deviceId})`);\n\n        this.updateCache[deviceId] = {\n            count: 0,\n            online: false,\n            energyCnt: 0,\n            powerCnt: 0,\n        };\n    }\n\n    private async updateRegister(deviceId: DeviceId): Promise<void> {\n        this.log.silly(`updateRegister(${deviceId})`);\n\n        this.updateCache[deviceId].count++;\n        this.updateCache[deviceId].online = true;\n        this.updateCache[deviceId].energyCnt++;\n        this.updateCache[deviceId].powerCnt++;\n\n        if (this.updateCache[deviceId].count === 1) {\n            await this.setState(`${deviceId}.info.online`, true, true);\n        }\n    }\n\n    private updateEnergy(deviceId: DeviceId): boolean {\n        this.log.silly(`updateEnergy(${deviceId})`);\n\n        if (this.updateCache[deviceId].energyCnt >= this.config.energyRate) {\n            this.updateCache[deviceId].energyCnt = 0;\n            return true;\n        }\n        return false;\n    }\n\n    private updatePower(deviceId: DeviceId): boolean {\n        this.log.silly(`updatePower(${deviceId})`);\n\n        if (this.updateCache[deviceId].powerCnt >= this.config.powerRate) {\n            this.updateCache[deviceId].powerCnt = 0;\n            return true;\n        }\n        return false;\n    }\n\n    private async updateRateChecker(): Promise<void> {\n        this.log.silly(`updateRateChecker())`);\n        for (const deviceId in this.updateCache) {\n            await this.setState(`${deviceId}.info.rate`, this.updateCache[deviceId].count, true);\n            this.updateCache[deviceId].count = 0;\n        }\n    }\n\n    private async updateOnlineChecker(): Promise<void> {\n        this.log.silly(`updateOnlineChecker())`);\n        for (const deviceId in this.updateCache) {\n            if (!this.updateCache[deviceId].online) {\n                await this.setState(`${deviceId}.info.online`, false, true);\n            }\n            this.updateCache[deviceId].online = false;\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Shrdzm(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Shrdzm())();\n}\n"],
  "mappings": "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",
  "names": ["dgram"]
}
